name: Workflow Dispath For Running AWS Terraform Code
on:
  workflow_dispatch:
    inputs:
      TERRAFORM:
        description: 'Shall We Run Terraform Plan/Apply/Destroy/Drift?'    
        required: true
        default: 'PLAN'
        type: choice
        options:
        - PLAN
        - APPLY
        - DESTROY
        - DRIFT
      Deployed_By:
        description: 'Who Deployed The Code?'
        required: false
        default: 'Enter Your Name'
        type: string
env:
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  #ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  TERRAFORM_DESTROY: ${{ vars.TERRAFORM_DESTROY_AZ }}

jobs:
  terraform-initiate:
    if: ${{ github.event.inputs.TERRAFORM == 'APPLY' || github.event.inputs.TERRAFORM == 'PLAN' || github.event.inputs.TERRAFORM == 'DESTROY' || github.event.inputs.TERRAFORM == 'DRIFT' }}
    name: 'Terraform Initialization'
    runs-on: ubuntu-latest
    # defaults:
    #   run:
    #     working-directory: ./azure-tfcode
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.0
      - name: Terraform Version Checking
        run: terraform version
      - name: Print Runner Name
        run: echo $(hostname)

  terraform-plan:
    if: ${{ github.event.inputs.TERRAFORM == 'PLAN' }}
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    needs: terraform-initiate
    # defaults:
    #   run:
    #     working-directory: ./azure-tfcode
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.0
      - name: Print Runner Name
        run: echo $(hostname)
      - name: Print Branch Reference
        run: echo The Current Branch Is $GITHUB_REF
      - name: Terraform Plan
        if: env.TERRAFORM_DESTROY == 'NO'
        run: |
         if [ ${GITHUB_REF} == 'refs/heads/development' ]; then
            echo "Running Terraform Plan For Development Environment"
            export ARM_SUBSCRIPTION_ID=${{ secrets.DEV_SUBSCRIPTION_ID }}
            terraform init \
            -backend-config="storage_account_name=devsecoptfstatedev" \
            -backend-config="container_name=devtfstate" \
            -backend-config="key=dev.tfstate"
            terraform plan --var-file=dev.tfvars
          elif [ ${GITHUB_REF} == 'refs/heads/production' ]; then
          echo "Running Terraform Plan For Production Environment"
            export ARM_SUBSCRIPTION_ID=${{ secrets.PROD_SUBSCRIPTION_ID }}
            terraform init \
            -backend-config="storage_account_name=devsecoptfstateprod" \
            -backend-config="container_name=prodtfstate" \
            -backend-config="key=prod.tfstate"
            terraform plan --var-file=prod.tfvars
          else
           echo "The Branch Is Not Development Or Production. Please Raise A PR To The Development Or Production Branch"         
          fi
  terraform-apply:
    if: ${{ github.event.inputs.TERRAFORM == 'APPLY' }}
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: terraform-plan
    # defaults:
    #   run:
    #     working-directory: ./azure-tfcode
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.0
      - name: Print Runner Name
        run: echo $(hostname)
      - name: Print Branch Reference
        run: echo The Current Branch Is $GITHUB_REF
      - name: Terraform Apply
        if: env.TERRAFORM_DESTROY == 'NO'
        run: |
         if [ ${GITHUB_REF} == 'refs/heads/development' ]; then
            echo "Running Terraform apply For Development Environment"
            export ARM_SUBSCRIPTION_ID=${{ secrets.DEV_SUBSCRIPTION_ID }}
            terraform init \
            -backend-config="storage_account_name=devsecoptfstatedev" \
            -backend-config="container_name=devtfstate" \
            -backend-config="key=dev.tfstate"
            terraform apply --var-file=dev.tfvars --auto-approve
          elif [ ${GITHUB_REF} == 'refs/heads/production' ]; then
          echo "Running Terraform apply For Production Environment"
            export ARM_SUBSCRIPTION_ID=${{ secrets.PROD_SUBSCRIPTION_ID }}
            terraform init \
            -backend-config="storage_account_name=devsecoptfstateprod" \
            -backend-config="container_name=prodtfstate" \
            -backend-config="key=prod.tfstate"
            terraform apply --var-file=prod.tfvars --auto-approve
          else
           echo "The Branch Is Not Development Or Production. Please Raise A PR To The Development Or Production Branch"         
          fi
  terraform-destroy:
    if: ${{ github.event.inputs.TERRAFORM == 'DESTROY' }}
    name: 'Terraform Destroy'
    runs-on: ubuntu-latest
    needs: terraform-initiate
    # defaults:
    #   run:
    #     working-directory: ./azure-tfcode
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.0
      - name: Print Runner Name
        run: echo $(hostname)
      - name: Print Branch Reference
        run: echo The Current Branch Is $GITHUB_REF
      - name: Terraform Destroy
        if: env.TERRAFORM_DESTROY == 'NO'
        run: |
         if [ ${GITHUB_REF} == 'refs/heads/development' ]; then
            echo "Running Terraform Destroy For Development Environment"
            export ARM_SUBSCRIPTION_ID=${{ secrets.DEV_SUBSCRIPTION_ID }}
            terraform init \
            -backend-config="storage_account_name=devsecoptfstatedev" \
            -backend-config="container_name=devtfstate" \
            -backend-config="key=dev.tfstate"
            terraform destroy --var-file=dev.tfvars --auto-approve
          elif [ ${GITHUB_REF} == 'refs/heads/production' ]; then
          echo "Running Terraform Destroy For Production Environment"
            export ARM_SUBSCRIPTION_ID=${{ secrets.PROD_SUBSCRIPTION_ID }}
            terraform init \
            -backend-config="storage_account_name=devsecoptfstateprod" \
            -backend-config="container_name=prodtfstate" \
            -backend-config="key=prod.tfstate"
            terraform destroy --var-file=prod.tfvars --auto-approve
          else
           echo "The Branch Is Not Development Or Production. Please Raise A PR To The Development Or Production Branch"         
          fi